# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RiverIndexes
                                 A QGIS plugin
 Water classification indexes plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Maclo
        email                : gvalenciam@pucp.pe
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsProject, QgsRasterLayer, QgsApplication, Qgis
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.gui import QgisInterface, QgsFileWidget
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from osgeo import gdal
import numpy as np
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .river_indexes_dialog import RiverIndexesDialog
import os.path
import sys


class RiverIndexes:
    """QGIS Plugin Implementation."""

    def showModalDialog(self, dialogTitle, dialogDescription, iconFlag, okButtonFlag, cancelButtonFlag):

        # Shows a modal dialog with title and description

        # Parameters:
        #    dialogTitle: Dialog title
        #    dialogDescription: Dialog description
        #    iconFlag: Integer to select the type of icon for the dialog
        #    okButtonFlag: Boolean to show or not the ok button on the dialog
        #    cancelButtonFlag: Boolean to show or not the cancel button on the dialog

        modalDialog = QMessageBox()

        # icon flag, 0: question, 1: information, 2: warning, 3: critical
        if (iconFlag == 0):
            modalDialog.setIcon(QMessageBox.Question)
        elif (iconFlag == 1):
            modalDialog.setIcon(QMessageBox.Information)
        elif (iconFlag == 2):
            modalDialog.setIcon(QMessageBox.Warning)
        elif (iconFlag == 3):
            modalDialog.setIcon(QMessageBox.Critical)
        else:
            modalDialog.setIcon(QMessageBox.Warning)

        modalDialog.setText(dialogTitle)
        modalDialog.setInformativeText(dialogDescription)

        if (okButtonFlag and cancelButtonFlag):
            modalDialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        elif (okButtonFlag):
            modalDialog.setStandardButtons(QMessageBox.Ok)
        elif (cancelButtonFlag):
            modalDialog.setStandardButtons(QMessageBox.Cancel)

        retval = modalDialog.exec_()

        if (retval == 1024 or retval == 4194304):
            self.endAllProcesses()

    def calculateNDVI(image, landsatSatellite):

        # Calculates NDVI index for the input image

        # Parameters:
        #    image: Input image
        #    landsatSatellite: Integer to select the Landsat satellite
        #       0 : Landsat 8
        #       1 : Landsat 7/5

        # Returns:
        #   NDVI Numpy array if image is multi band
        #   -1 if image is single band

        if (image.RasterCount > 1):
            if (landsatSatellite == 0):
                nir = image.GetRasterBand(5).ReadAsArray()
                red = image.GetRasterBand(4).ReadAsArray()
                ndvi = (nir - red) / (nir + red)
                return ndvi
            elif (landsatSatellite == 1):
                nir = image.GetRasterBand(4).ReadAsArray()
                red = image.GetRasterBand(3).ReadAsArray()
                ndvi = (nir - red) / (nir + red)
                return ndvi
        else:
            return -1

    def calculateNDWI(image, landsatSatellite):

        # Calculates NDWI index for the input image

        # Parameters:
        #    image: Input image
        #    landsatSatellite: Integer to select the Landsat satellite
        #       0 : Landsat 8
        #       1 : Landsat 7/5

        # Returns:
        #   NDWI Numpy array if image is multi band
        #   -1 if image is single band

        if (image.RasterCount > 1):
            if (landsatSatellite == 0):
                nir = image.GetRasterBand(5).ReadAsArray()
                swir = image.GetRasterBand(6).ReadAsArray()
                ndwi = (nir - swir) / (nir + swir)
                return ndwi
            elif (landsatSatellite == 1):
                nir = image.GetRasterBand(4).ReadAsArray()
                swir = image.GetRasterBand(5).ReadAsArray()
                ndwi = (nir - swir) / (nir + swir)
                return ndwi
        else:
            return -1

    def calculateWRI(image, landsatSatellite):

        # Calculates WRI index for the input image

        # Parameters:
        #    image: Input image
        #    landsatSatellite: Integer to select the Landsat satellite
        #       0 : Landsat 8
        #       1 : Landsat 7/5

        # Returns:
        #   WRI Numpy array if image is multi band
        #   -1 if image is single band

        if (image.RasterCount > 1):
            if (landsatSatellite == 0):
                green = image.GetRasterBand(3).ReadAsArray()
                red = image.GetRasterBand(4).ReadAsArray()
                nir = image.GetRasterBand(5).ReadAsArray()
                swir2 = image.GetRasterBand(7).ReadAsArray()
                wri = (green + red) / (nir + swir2)
                return wri
            elif (landsatSatellite == 1):
                green = image.GetRasterBand(2).ReadAsArray()
                red = image.GetRasterBand(3).ReadAsArray()
                nir = image.GetRasterBand(4).ReadAsArray()
                swir2 = image.GetRasterBand(7).ReadAsArray()
                wri = (green + red) / (nir + swir2)
                return wri
        else:
            return -1

    indexes = [
        {
            "indexName": 'NDVI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateNDVI
        },
        {
            "indexName": 'NDWI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateNDWI
        },
        {
            "indexName": 'WRI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateWRI
        }
    ]

    layersNames = []
    layersData = []
    outputFolder = ''
    imagePath = ''
    singleIndexProgressValue = 0
    maxNumberOfProcesses = 6
    processCounter = 0

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RiverIndexes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&River Indexes')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RiverIndexes', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/river_indexes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'River Indexes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&River Indexes'),
                action)
            self.iface.removeToolBarIcon(action)

    def getThresholdCheckbox(self, indice):

        # Gets the threshold checkbox corresponding to integer 'indice'

        # Parameters:
        #    indice: Integer corresponding to a checkbox
        #       0 : NDVI threshold checkbox
        #       1 : NDWI threshold checkbox
        #       2 : WRI threshold checkbox

        # Returns:
        #   Corresponding threshold checkbox

        if (indice == 0):
            return self.dlg.ndvi_threshold_checkBox
        elif (indice == 1):
            return self.dlg.ndwi_threshold_checkBox
        elif (indice == 2):
            return self.dlg.wri_threshold_checkBox

    def checkboxSelected(self, checkbox, indice):

        # Changes the selected status for the corresponding index JSON object of the 'indexes' variable

        # Parameters:
        #    checkbox: Index checkbox to verify checked status
        #    indice:
        #       0 : NDVI index checkbox
        #       1 : NDWI index checkbox
        #       2 : WRI index checkbox

        self.indexes[indice]["selected"] = True if (
            checkbox.isChecked()) else False

    def thresholdCheckboxSelected(self, checkbox, spinboxToEnable, indice):

        # Updates the threshold field for the corresponding element in the 'indexes' variable

        # Parameters:
        #    checkbox: Threshold checkbox to verify checked status
        #    spinboxToEnable: Spin box to be enabled in case corresponding checkbox is selected
        #    indice:
        #       0 : NDVI threshold checkbox
        #       1 : NDWI threshold checkbox
        #       2 : WRI threshold checkbox

        spinboxToEnable.setEnabled(True) if checkbox.isChecked(
        ) else spinboxToEnable.setEnabled(False)
        self.indexes[indice]["threshold"] = spinboxToEnable.value() if checkbox.isChecked(
        ) else 0.5

    def spinboxValueChanged(self, spinbox, indice):

        # Updates the threshold field for the corresponding element in the 'indexes' variable

        # Parameters:
        #    spinbox: Spin box that triggers the value changed event
        #    indice:
        #       0 : NDVI JSON element
        #       1 : NDWI JSON element
        #       2 : WRI JSON element

        self.indexes[indice]["threshold"] = spinbox.value()

    def select_output_file(self):

        # Creates the dialog to select the output folder and updates the 'output path' text field

        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.Directory)
        dialog.exec()
        if (dialog.selectedFiles()):
            outputFolder = dialog.selectedFiles()[0]
            self.dlg.output_lineEdit.setText(outputFolder)

    def createTiffFromArray(self, image, array, outputPath, imageName):

        # Creates raster layer from numoy array and saves it in the outputPath parameter with imageName as file name.
        # After creation the image is opened and added to the layers panel if it is a valid image

        # Parameters:
        #    image: Base image to get the SetGeoTransform and SetProjection values
        #    array: input numpy array to generate image
        #    outputPath: path for the new generated image
        #    imageName: Name for the new generated image

        driver = gdal.GetDriverByName('GTiff')
        output = driver.Create(outputPath, image.RasterXSize,
                               image.RasterYSize, 1, eType=gdal.GDT_Float32)
        output.GetRasterBand(1).WriteArray(array)
        output.SetGeoTransform(image.GetGeoTransform())
        output.SetProjection(image.GetProjection())
        output = None
        rasterLayer = QgsRasterLayer(outputPath, imageName)
        if not rasterLayer.isValid():
            print("Layer failed to load!")
        else:
            QgsProject.instance().addMapLayer(rasterLayer)

    def reclassify(self, path, threshold):

        # Reclassifies image located in path for the given threshold

        # Parameters:
        #    path: Image to reclassify location
        #    threshold: value for the reclassification

        # Returns:
        #   Reclassified numpy array if the image is single banded
        #   -1 if the image is multi banded

        image = gdal.Open(path)

        if (image.RasterCount == 1):
            imageArray = image.GetRasterBand(1).ReadAsArray()
            imageArray[np.where(imageArray < threshold)] = 0.0
            imageArray[np.where(imageArray >= threshold)] = 1.0
            return imageArray

        else:
            return -1

    def startScript(self):

        # Entire process plugin function

        # Steps:
        #   Check if there is at least one raster layer available in the project otherwise a warning dialog pops
        #   Check if the output folder has been selected otherwise a warning dialog pops
        #   Check if any option (index or threshold) is selected otherwise a warning dialog pops
        #   For each JSON object in the 'indexes' variable:
        #       Opens the image selected in the combobox and
        #           If index checkbox is selected calculates the corresponding index
        #           If index checkbox is not selected but threshold checkbox is, reclassifies the image
        #           For any of these cases a new image or images are generated and added to the layers panel
        #   If at least one image is generated a success message box is shown with the location of the generated images as description

        self.dlg.cancel_pushButton.setEnabled(True)
        self.processCounter = 0

        if (self.dlg.layers_comboBox.currentIndex() != -1):

            self.dlg.progressBar.setValue(5)

            if (self.dlg.output_lineEdit.text() == ''):
                self.showModalDialog("Warning: No output folder selected",
                                     "Please select an output folder for the images", 2, True, False)
            else:
                outputFolder = self.dlg.output_lineEdit.text()
                layerName = self.layersNames[self.dlg.layers_comboBox.currentIndex(
                )]

                for index in self.indexes:

                    image = gdal.Open(self.layersData[self.dlg.layers_comboBox.currentIndex(
                    )].dataProvider().dataSourceUri())

                    if (index["selected"] and self.processCounter >= 0):

                        self.imagePath = outputFolder + '/' + \
                            layerName + '_' + index["indexName"] + '.tif'
                        newImageName = layerName + '_' + index["indexName"]
                        indexImageArray = index["function"](image, 0)

                        if (not type(indexImageArray) is np.ndarray):
                            self.showModalDialog(
                                "Warning: Input image is single banded", "Check if the inout image has the required bands for the index", 2, True, False)
                        else:
                            self.createTiffFromArray(
                                image, indexImageArray, self.imagePath, newImageName)
                            self.dlg.progressBar.setValue(
                                self.dlg.progressBar.value() + self.singleIndexProgressValue)
                            self.processCounter += 1

                    if (self.getThresholdCheckbox(self.indexes.index(index)).isChecked() and self.processCounter >= 0):

                        if (not index["selected"]):
                            self.imagePath = self.layersData[self.dlg.layers_comboBox.currentIndex(
                            )].dataProvider().dataSourceUri()

                        imageReclassifiedArray = self.reclassify(
                            self.imagePath, index["threshold"])

                        if (not type(imageReclassifiedArray) is np.ndarray):
                            self.showModalDialog(
                                "Warning: Reclassification image error", "Input reclassification image must have only one band", 2, True, False)
                        else:
                            self.createTiffFromArray(image, imageReclassifiedArray, outputFolder + '/' + layerName + '_' +
                                                     index["indexName"] + '_' + str(index["threshold"]) + '.tif', layerName + '_' + index["indexName"] + '_' + str(index["threshold"]) + '.tif')
                            self.dlg.progressBar.setValue(
                                self.dlg.progressBar.value() + self.singleIndexProgressValue)
                            self.processCounter += 1

                if (self.processCounter == 0):
                    self.showModalDialog(
                        "Warning: No option selected", "Select an index and/or threshold option", 2, True, False)
                elif (self.processCounter > 0):
                    if (self.dlg.output_lineEdit.text() == ''):
                        self.iface.messageBar().pushMessage(
                            "Success", "Layer(s) created", level=Qgis.Success, duration=3)
                    else:
                        self.iface.messageBar().pushMessage("Success", "Layer(s) created at: " +
                                                            outputFolder, level=Qgis.Success, duration=3)
                    self.dlg.progressBar.setValue(100)
                    self.processCounter = 0
                    self.dlg.cancel_pushButton.setEnabled(False)

        else:
            self.showModalDialog(
                "Warning: No raster layer available", "Add a raster layer to your project", 2, True, False)

    def endAllProcesses(self):

        # Restarts all the logic and UI variables in case of error or bad input parameters
        self.processCounter = -1
        self.dlg.progressBar.setValue(0)
        self.dlg.cancel_pushButton.setEnabled(False)

    def run(self):
        """Run method that performs all the real work"""

       # Create the dialog with elements (after translation) and keep reference
       # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RiverIndexesDialog()
            self.dlg.ndvi_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.ndvi_checkBox, 0))
            self.dlg.ndwi_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.ndwi_checkBox, 1))
            self.dlg.wri_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.wri_checkBox, 2))
            self.dlg.ndvi_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.ndvi_threshold_checkBox, self.dlg.ndvi_doubleSpinBox, 0))
            self.dlg.ndwi_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.ndwi_threshold_checkBox, self.dlg.ndwi_doubleSpinBox, 1))
            self.dlg.wri_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.wri_threshold_checkBox, self.dlg.wri_doubleSpinBox, 2))
            self.dlg.ndvi_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.ndvi_doubleSpinBox, 0))
            self.dlg.ndwi_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.ndwi_doubleSpinBox, 1))
            self.dlg.wri_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.wri_doubleSpinBox, 2))
            self.dlg.output_pushButton.clicked.connect(self.select_output_file)
            self.dlg.cancel_pushButton.clicked.connect(
                self.endAllProcesses)
            self.singleIndexProgressValue = 90 / self.maxNumberOfProcesses

        for layer in QgsProject.instance().layerTreeRoot().children():
            # Equals 1: Raster Layers only
            if (layer.layer().type() == 1):
                self.layersNames.append(layer.layer().name())
                self.layersData.append(layer.layer())

        self.dlg.layers_comboBox.clear()
        self.dlg.layers_comboBox.addItems(self.layersNames)
        self.dlg.run_pushButton.clicked.connect(self.startScript)

        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass
