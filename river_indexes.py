# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RiverIndexes
                                 A QGIS plugin
 Water classification indexes plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Maclo
        email                : gvalenciam@pucp.pe
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsProject, QgsRasterLayer, QgsApplication, Qgis
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.gui import QgisInterface, QgsFileWidget
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from osgeo import gdal
import numpy as np
import tempfile
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .river_indexes_dialog import RiverIndexesDialog
import os.path
import sys


class RiverIndexes:
    """QGIS Plugin Implementation."""

    def calculateNDVI(image, landsatSatellite):
        # Landsat Satellite
        # 0 : Landsat 8
        # 1 : Landsat 7/5
        if (landsatSatellite == 0):
            nir = image.GetRasterBand(5).ReadAsArray()
            red = image.GetRasterBand(4).ReadAsArray()
            ndvi = (nir - red) / (nir + red)
            return ndvi
        elif (landsatSatellite == 1):
            nir = image.GetRasterBand(4).ReadAsArray()
            red = image.GetRasterBand(3).ReadAsArray()
            ndvi = (nir - red) / (nir + red)
            return ndvi

    def calculateNDWI(image, landsatSatellite):
        # Landsat Satellite
        # 0 : Landsat 8
        # 1 : Landsat 7/5
        if (landsatSatellite == 0):
            nir = image.GetRasterBand(5).ReadAsArray()
            swir = image.GetRasterBand(6).ReadAsArray()
            ndwi = (nir - swir) / (nir + swir)
            return ndwi
        elif (landsatSatellite == 1):
            nir = image.GetRasterBand(4).ReadAsArray()
            swir = image.GetRasterBand(5).ReadAsArray()
            ndwi = (nir - swir) / (nir + swir)
            return ndwi

    def calculateWRI(image, landsatSatellite):
        # Landsat Satellite
        # 0 : Landsat 8
        # 1 : Landsat 7/5
        if (landsatSatellite == 0):
            green = image.GetRasterBand(3).ReadAsArray()
            red = image.GetRasterBand(4).ReadAsArray()
            nir = image.GetRasterBand(5).ReadAsArray()
            swir2 = image.GetRasterBand(7).ReadAsArray()
            wri = (green + red) / (nir + swir2)
            return wri
        elif (landsatSatellite == 1):
            green = image.GetRasterBand(2).ReadAsArray()
            red = image.GetRasterBand(3).ReadAsArray()
            nir = image.GetRasterBand(4).ReadAsArray()
            swir2 = image.GetRasterBand(7).ReadAsArray()
            wri = (green + red) / (nir + swir2)
            return wri

    indexes = [
        {
            "indexName": 'NDVI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateNDVI
        },
        {
            "indexName": 'NDWI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateNDWI
        },
        {
            "indexName": 'WRI',
            "threshold": 0.5,
            "selected": False,
            "function": calculateWRI
        }
    ]

    layersNames = []
    layersData = []
    outputFolder = ''
    singleIndexProgressValue = 0
    maxNumberOfProcesses = 6

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RiverIndexes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&River Indexes')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RiverIndexes', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/river_indexes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'River Indexes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&River Indexes'),
                action)
            self.iface.removeToolBarIcon(action)

    def getThresholdCheckbox(self, indice):
        if (indice == 0):
            return self.dlg.ndvi_threshold_checkBox
        elif (indice == 1):
            return self.dlg.ndwi_threshold_checkBox
        elif (indice == 2):
            return self.dlg.wri_threshold_checkBox

    def checkboxSelected(self, checkbox, indice):
        self.indexes[indice]["selected"] = True if (
            checkbox.isChecked()) else False
        # print(self.indexes)

    def thresholdCheckboxSelected(self, checkbox, spinboxToEnable, indice):
        spinboxToEnable.setEnabled(True) if checkbox.isChecked(
        ) else spinboxToEnable.setEnabled(False)
        self.indexes[indice]["threshold"] = spinboxToEnable.value() if checkbox.isChecked(
        ) else 0.5
        # print(self.indexes)

    def spinboxValueChanged(self, spinbox, indice):
        self.indexes[indice]["threshold"] = spinbox.value()
        # print(self.indexes)

    def select_output_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.Directory)
        dialog.exec()
        if (dialog.selectedFiles()):
            outputFolder = dialog.selectedFiles()[0]
            self.dlg.output_lineEdit.setText(outputFolder)

    def createTiffFromArray(self, image, array, outputPath, imageName):
        driver = gdal.GetDriverByName('GTiff')
        output = driver.Create(outputPath, image.RasterXSize,
                               image.RasterYSize, 1, eType=gdal.GDT_Float32)
        output.GetRasterBand(1).WriteArray(array)
        output.SetGeoTransform(image.GetGeoTransform())
        output.SetProjection(image.GetProjection())
        output = None
        rasterLayer = QgsRasterLayer(outputPath, imageName)
        if not rasterLayer.isValid():
            print("Layer failed to load!")
        else:
            QgsProject.instance().addMapLayer(rasterLayer)

    def reclassify(self, path, threshold):

        image = gdal.Open(path)
        imageArray = image.GetRasterBand(1).ReadAsArray()
        imageArray[np.where(imageArray < threshold)] = 0.0
        imageArray[np.where(imageArray >= threshold)] = 1.0
        return imageArray

    def startScript(self):

        self.dlg.cancel_pushButton.setEnabled(True)
        self.dlg.progressBar.setValue(5)

        for index in self.indexes:
            layerName = self.layersNames[self.dlg.layers_comboBox.currentIndex(
            )]

            if (self.dlg.output_lineEdit.text() == ''):
                outputFolder = tempfile.TemporaryDirectory()
            else:
                outputFolder = self.dlg.output_lineEdit.text()

            if (index["selected"]):
                # get raster layer from Qgis
                image = gdal.Open(self.layersData[self.dlg.layers_comboBox.currentIndex(
                )].dataProvider().dataSourceUri())
                imageArray = image.GetRasterBand(1).ReadAsArray()
                imagePath = outputFolder + '/' + layerName + \
                    '_' + index["indexName"] + '.tif'
                newImageName = layerName + '_' + index["indexName"]

                indexImageArray = index["function"](image, 0)
                self.createTiffFromArray(
                    image, indexImageArray, imagePath, newImageName)

                self.dlg.progressBar.setValue(
                    self.dlg.progressBar.value() + self.singleIndexProgressValue)

                if (self.getThresholdCheckbox(self.indexes.index(index)).isChecked()):
                    imageReclassifiedArray = self.reclassify(
                        imagePath, index["threshold"])
                    self.createTiffFromArray(image, imageReclassifiedArray, outputFolder + '/' + layerName + '_' +
                                             index["indexName"] + '_' + str(index["threshold"]) + '.tif', layerName + '_' + index["indexName"] + '_' + str(index["threshold"]) + '.tif')

                self.dlg.progressBar.setValue(
                    self.dlg.progressBar.value() + self.singleIndexProgressValue)

        if (self.dlg.ndvi_checkBox.isChecked() or self.dlg.ndwi_checkBox.isChecked() or self.dlg.wri_checkBox.isChecked()):
            self.iface.messageBar().pushMessage("Success", "Layer(s) created at " +
                                                outputFolder, level=Qgis.Success, duration=3)

        self.dlg.progressBar.setValue(100)
        self.dlg.cancel_pushButton.setEnabled(False)

    def finishReclassification(self):
        self.dlg.close()

    def run(self):
        """Run method that performs all the real work"""

       # Create the dialog with elements (after translation) and keep reference
       # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RiverIndexesDialog()
            self.dlg.ndvi_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.ndvi_checkBox, 0))
            self.dlg.ndwi_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.ndwi_checkBox, 1))
            self.dlg.wri_checkBox.clicked.connect(
                lambda: self.checkboxSelected(self.dlg.wri_checkBox, 2))
            self.dlg.ndvi_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.ndvi_threshold_checkBox, self.dlg.ndvi_doubleSpinBox, 0))
            self.dlg.ndwi_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.ndwi_threshold_checkBox, self.dlg.ndwi_doubleSpinBox, 1))
            self.dlg.wri_threshold_checkBox.clicked.connect(
                lambda: self.thresholdCheckboxSelected(self.dlg.wri_threshold_checkBox, self.dlg.wri_doubleSpinBox, 2))
            self.dlg.ndvi_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.ndvi_doubleSpinBox, 0))
            self.dlg.ndwi_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.ndwi_doubleSpinBox, 1))
            self.dlg.wri_doubleSpinBox.valueChanged.connect(
                lambda: self.spinboxValueChanged(self.dlg.wri_doubleSpinBox, 2))
            self.dlg.output_pushButton.clicked.connect(self.select_output_file)
            self.dlg.cancel_pushButton.clicked.connect(
                self.finishReclassification)
            self.singleIndexProgressValue = 90 / self.maxNumberOfProcesses

        for layer in QgsProject.instance().layerTreeRoot().children():
            # Equals 1: Raster Layers only
            if (layer.layer().type() == 1):
                self.layersNames.append(layer.layer().name())
                self.layersData.append(layer.layer())

        self.dlg.layers_comboBox.clear()
        self.dlg.layers_comboBox.addItems(self.layersNames)
        self.dlg.run_pushButton.clicked.connect(self.startScript)

        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass
